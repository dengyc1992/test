1.类 class 创建 实例
class Person(object):
	pass
xiaoming=person
print 'xiaoming'

2.创建实例属性
class Person(object):
	pass
p1=Person()
p1.name ='Bart'

p2=Person()
p2.name='amin'

p3=Persom()
p3.name='cc'

L1= [p1,p2,p3]
L2=sorted(L1,lambda p1,p2:cmp(p1.name,p2,name))

print L2[0].name
print L2[1].name
print L3[2].name

3.初始化实例属性
class Person(object):
	def __init__(self,name,gender,birth,**kw):
		self.name=name
		self.gender=gender
		self.birth=birth
		for k,v in kw.iteritems():
			setattr(self,k,v)
xiangming =Person('xiaoming','male','1992-07-15'john=Student)
print xiaoming
print xiaoming.john

访问限制
class Person(object):
	def __init__(self,name,score):
		self.name=name
		self.__score=score
抛出异常
tyr:
	print p.__score
except:
	print 'attributeerror'

创建类属性
class Person(object):
	count=0
	def __init__(self)

定义实例方法：
    def get_grade(self):
        if self.__score >=80:
            return 'A'
        if self.__score >=60:
            return 'B'
        if self.__score <60:
            return 'C'
print p1.get_greade()

定义类方法：方法分为实例方法和类方法
类方法要加:@classmethod

类的继承
person父类
def Student（person）子类
继承后初始化:super(Student,self).__init__(name,gender)


判断类型：isinstance(t,Person)

多态：import json
class Students(object):
	def read(self):
	    return r'["Tim","Bob","Alice"]'
s=Students
print json.load(s)