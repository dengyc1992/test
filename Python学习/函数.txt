把函数作为参数
    def add(x,y,f):
	returnf(x)+f(y)
print add(25,9,math.sqrt)	

map函数  可以把一个 list 转换为另一个 list，只需要传入转换函数。
    def format_nane(s)
	return s[0].upper()+s[1:].lower()  或者return s.capitalize()
print map(format_name,['admin','Lisa','bart'])


reduce函数
    def f(x,y)
	return x*y
print (求和函数)reduce(f,[2,4,5,7,12])


filter函数  根据判断结果自动过滤掉不符合条件的元素，返回符合条件元素组成的新list
import math
    def is_sqr(x):
        r=math.sqrt(x)%1 == 0
	r = int(math.sqrt(x))
	  return r*r==x
print filter(is_sqr,range(1,101))


sorted自定义排序函数
     def cmp_ignore_case(s1,s2)
	u1=s1.upper()
	u2=s2.upper()
	if u1<u2:
	   return -1          return s1,lower
	if u1>u2
	   return 1
	return 0
print sorted(['bob','about','zoo','Credit'],cmp_ignore_case)

返回函数
def  calc_prod(list):
	def lazy_prod():
	    def f(x,y):
		return x*y
	return reduce(f,list,1)
return lazy_prod
f=calc_prod([1,2,3,4])
print f()


闭包 
def count():
     fs =[]
     for i in range(1,4):
	def f(j):
	    def g():
		return j*j
	    return g
	r = f(i)
	fs.append(r)
     return fs

匿名函数（lambda）
def f(x):
   return x*y     就是   lambda x:x*y

装饰器（1.定义一个函数，动态增加功能，不想改动函数本身的代码）
@new_fn  def f (X)  return x*2 f1 =new_fn(f1)
作用：1.打印日志@log
      2.检测性能：@performance
      3.数据库：@transaction
      4.usr:@post('/register')
编写没有带参数：decorator
def performance(f):
	def fn(*args,**kw):
	   t1=time.time()
	   r = f(*args,**kw)
	   t2=time.time()
	   print 'call %s()in %fs'%(f.__name__,(t2-t1))
	   return r 
	return fn
@performance
def factorial(n):
	return reduce(lambda x,y:range(1,n+1))

编写带参数的：decorator
def performance(unit):
	def a (f):
		def b(*args,**kw):
			if unit ==ms
			print 
			else if unit==s
			print 	
			return f(*args,**kw)
	return a
@performance('ms')
def factorial(n):
	return reduce(lambda x,y:range(1,n+1))

完善decorator
def performance(unit)：
	def per(f):
		@functools.si(f)
		def si(*args,**kw):
		    if unit==ms
			print 
		    else if unit==s
			print 
		return si
	return perf
@performance('ms')
def factorial(n):
	return reduce(lambda x,y:range(1,n+1))


偏函数：functools.partial
case= functools.partial(sorted,cmp=lambda s1,s2:cmp(s1.upper(),s2.upper()))